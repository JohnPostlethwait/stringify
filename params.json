{"google":"","name":"Stringify","body":"# Stringify #\r\n\r\nBrowserify plugin to require() text files (like templates) inside of your client-side JavaScript files.\r\n\r\n## Installation ##\r\n\r\n```bash\r\nnpm install stringify\r\n```\r\n\r\n## Usage ##\r\n\r\nSetup Browserify to use this middleware in your app:\r\n\r\n```javascript\r\nvar browserify = require('browserify'),\r\n    stringify = require('stringify');\r\n\r\nvar bundle = browserify()\r\n    .use(stringify(['.hjs', '.html', '.whatever']))\r\n    .addEntry('my_app_main.js');\r\n\r\napp.use(bundle);\r\n```\r\nYou might have noticed that you can pass stringify an optional array of file-extensions that you want to require() in your Browserify packages as strings. By default these are used: .html, .txt, .text, and .tmpl\r\n\r\n__NOTE__: You MUST call this as I have above. The Browserify .use() method HAS to plug this middleware in to Browserify BEFORE you add the entry point (your main client-side file) for Browserify.\r\n\r\nNow, in your clientside files you can use require() as you would for JSON and JavaScript files, but include text files that have just been parsed into a JavaScript string:\r\n\r\n```javascript\r\nvar my_text = require('../path/to/my/text/file.txt');\r\n\r\nconsole.log(my_text);\r\n```\r\n\r\n## More Realistic Example & Use-Case ##\r\n\r\nThe reason I created this was to get string versions of my Handlebars templates required in to my client-side JavaScript. You can theoretically use this for any templating parser though.\r\n\r\nHere is how that is done:\r\n\r\napplication.js:\r\n```javascript\r\nvar browserify = require('browserify'),\r\n    stringify = require('stringify');\r\n\r\nvar bundle = browserify()\r\n    .use(stringify(['.hbs', '.handlebars']))\r\n    .addEntry('my_app_main.js');\r\n\r\napp.use(bundle);\r\n```\r\n\r\nmy_app_main.js:\r\n```javascript\r\nvar Handlebars = require('handlebars'),\r\n    template = require('my/template/path.hbs'),\r\n    data = require('data.json');\r\n\r\nvar hbs_template = Handlebars.compile(template);\r\n\r\n// Now I can use hbs_template like I would anywhere else, passing it data and getting constructed HTML back.\r\nvar constructed_template = hbs_template(data);\r\n\r\n/*\r\n  Now 'constructed_template' is ready to be appended to the DOM in the page!\r\n  The result of it should be:\r\n\r\n  <p>This is my string!</p>\r\n*/\r\n```\r\n\r\nmy/template/path.hbs:\r\n```html\r\n<p>{{ json_data }}</p>\r\n```\r\n\r\ndata.json\r\n```json\r\n{\r\n  \"json_data\": \"This is my string!\"\r\n}\r\n```\r\n","tagline":"Browserify plugin to require() text files (templates) inside of your client-side JavaScript files.","note":"Don't delete this file! It's used internally to help with page regeneration."}